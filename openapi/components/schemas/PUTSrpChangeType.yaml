allOf:
  - properties:
      chargeOverrides:
        description: >-
          This optional container is used to override one or more product rate
          plan charges for this subscription.
        items:
          $ref: ./PUTScAddType.yaml
        type: array
      contractEffectiveDate:
        description: Effective date of the new subscription, as yyyy-mm-dd.
        format: date
        type: string
      customerAcceptanceDate:
        description: >
          The date when the customer accepts the contract in yyyy-mm-dd format.

          When this field is not set:

          * If the `serviceActivationDate` field is not set, the value of this
          field

          is set to be the contract effective date.

          * If the `serviceActivationDate` field is set, the value of this field
          is

          set to be the service activation date.


          The billing trigger dates must follow this rule: contractEffectiveDate
          <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
      effectivePolicy:
        description: >
          * If the rate plan change (from old to new) is an upgrade, the
          effective policy is `EffectiveImmediately` by default.

          * If the rate plan change (from old to new) is a downgrade, the
          effective policy is `EffectiveEndOfBillingPeriod` by default.

          * Otherwise, the effective policy is `SpecificDate` by default.
        enum:
          - EffectiveImmediately
          - EffectiveEndOfBillingPeriod
          - SpecificDate
        type: string
      externalCatalogPlanId:
        description: >
          An external ID of the rate plan to be removed. You can use this field
          to specify an existing rate plan in your subscription. The value of
          the `externalCatalogPlanId` field must match one of the values that
          are predefined in the `externallyManagedPlanIds` field on a product
          rate plan. However, if there are multiple rate plans with the same
          `productRatePlanId` value existing in the subscription, you must use
          the `ratePlanId` field to remove the rate plan. The
          `externalCatalogPlanId` field cannot be used to distinguish multiple
          rate plans in this case.


          **Note:** Provide only one of `externalCatalogPlanId`, `ratePlanId` or
          `productRatePlanId`. If more than one field is provided then the
          request would fail.
        type: string
      newExternalCatalogPlanId:
        description: >
          An external ID of the product rate plan to be added. You can use this
          field to specify a product rate plan that is imported from an external
          system. The value of the `externalCatalogPlanId` field must match one
          of the values that are predefined in the `externallyManagedPlanIds`
          field on a product rate plan.


          **Note:** Provide only one of `newExternalCatalogPlanId` or
          `newProductRatePlanId`. If both fields are provided then the request
          would fail.
        type: string
      newProductRatePlanId:
        description: ID of a product rate plan for this subscription.
        type: string
      productRatePlanId:
        description: ID of a product rate plan for a rate plan of this subscription.
        type: string
      ratePlanId:
        description: ID of a rate plan for this subscription.
        type: string
      resetBcd:
        default: false
        description: >
          If resetBcd is true then reset the Account BCD to the effective date;
          if it is false keep the original BCD.
        type: boolean
      serviceActivationDate:
        description: >-
          The date when the change in the subscription is activated in
          yyyy-mm-dd format. You must specify a Service Activation date if the
          Customer Acceptance date is set. If the Customer Acceptance date is
          not set, the value of the `serviceActivationDate` field defaults to be
          the Contract Effective Date. The billing trigger dates must follow
          this rule: contractEffectiveDate <= serviceActivationDate <=
          contractAcceptanceDate
        format: date
        type: string
      subType:
        description: >
          Use this field to choose the sub type for your change plan amendment. 


          However, if you do not set this field, the field will be automatically
          generated by the system according to the following rules:


          When the old and new rate plans are within the same Grading catalog
          group:

          * If the grade of new plan is greater than that of the old plan, this
          is an "Upgrade".

          * If the grade of new plan is less than that of the old plan, this is
          a "Downgrade".

          * If the grade of new plan equals that of the old plan, this is a
          "Crossgrade".


          When the old and new rate plans are not in the same Grading catalog
          group, or either has no group, this is "PlanChanged".
        enum:
          - Upgrade
          - Downgrade
          - Crossgrade
          - PlanChanged
        type: string
    type: object
  - $ref: ./RatePlanObjectCustomFields.yaml
title: change
